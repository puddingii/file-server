name: file-server-storage

on:
  push:
    paths:
      - 'apps/storage/**'
      - 'libs/**'
      - '!**/*.md'
    branches: [main]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/storage
  VERSION: ${{ github.sha }}
  CONTAINER_NAME: file_server_storage

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v4

      # docker setup
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 캐싱된 내용 가져오기
      - name: Cache docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Docker 빌드 및 푸쉬
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          file: ./docker/apps/Dockerfile.storage
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  # 배포 Job
  deploy:
    needs: build # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [file-server]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 기존 Container 확인
      - name: Docker Check Existed Container
        id: docker-container-check-result
        run: |
          echo "IS_EXISTED=$(docker container ls | grep ${{ env.CONTAINER_NAME }})" >> $GITHUB_OUTPUT

      # 기존 Container가 있는 경우 제거
      - name: Docker Remove Existed Container
        if: ${{ contains(steps.docker-container-check-result.outputs.IS_EXISTED, env.CONTAINER_NAME) == true }}
        run: |
          docker stop ${{ env.CONTAINER_NAME }}
          docker rm ${{ env.CONTAINER_NAME }}

      # 기존 Image 확인
      - name: Docker Check Existed Image
        id: docker-image-check-result
        run: |
          echo "IS_EXISTED=$(docker image ls | grep ${{ env.DOCKER_IMAGE }})" >> $GITHUB_OUTPUT

      # 기존 Image가 있는 경우 제거
      - name: Docker Remove Existed Image
        if: ${{ contains(steps.docker-image-check-result.outputs.IS_EXISTED, env.DOCKER_IMAGE) == true }}
        run: |
          docker rmi ${{ env.DOCKER_IMAGE }}:latest

      # Docker 환경변수 셋팅 및 Volume, Port 설정 값으로 Run
      - name: Docker run
        run: |
          docker run -d \
          --env-file ${{ secrets.STORAGE_ENV_PATH }} \
          -p ${{ secrets.STORAGE_PORT }}:${{ secrets.STORAGE_PORT }} \
          --name ${{ env.CONTAINER_NAME }} \
          --restart always ${{ env.DOCKER_IMAGE }}:latest
